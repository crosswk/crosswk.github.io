{"meta":{"title":"Crosswalk Blog","subtitle":"","description":"","author":"Liu Qianglong","url":"http://yoursite.com","root":"/"},"pages":[{"title":"标签","date":"2020-03-06T04:25:04.000Z","updated":"2020-03-06T04:26:06.698Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-03-06T04:30:06.000Z","updated":"2020-03-06T04:31:58.966Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Cisco AnyConnect 通过FreeRADIUS集成域账号+谷歌双因素认证","slug":"Cisco-AnyConnect-通过FreeRADIUS集成域账号-谷歌双因素认证","date":"2020-03-06T12:28:51.000Z","updated":"2020-03-06T12:48:55.655Z","comments":true,"path":"2020/03/06/Cisco-AnyConnect-通过FreeRADIUS集成域账号-谷歌双因素认证/","link":"","permalink":"http://yoursite.com/2020/03/06/Cisco-AnyConnect-%E9%80%9A%E8%BF%87FreeRADIUS%E9%9B%86%E6%88%90%E5%9F%9F%E8%B4%A6%E5%8F%B7-%E8%B0%B7%E6%AD%8C%E5%8F%8C%E5%9B%A0%E7%B4%A0%E8%AE%A4%E8%AF%81/","excerpt":"一、环境介绍 实验目的：用户使用Cisco AnyConnect拨号时，输入AD账号密码和谷歌动态码后通过认证，获得授权。Cisco ASA指向FreeRADIUS做认证，FreeRADIUS联动AD和google_authenticator。 拓扑图","text":"一、环境介绍 实验目的：用户使用Cisco AnyConnect拨号时，输入AD账号密码和谷歌动态码后通过认证，获得授权。Cisco ASA指向FreeRADIUS做认证，FreeRADIUS联动AD和google_authenticator。 拓扑图 实验环境CentOS8有两块网卡，一块网卡用于访问Internet，一块网卡位于防火墙inside区域。 这里使用CentOS8（CentOS7也可以）安装FreeRADIUS和Google Authenticator。Windows Server 2016安装AD服务，AD安装过程这里不做介绍。需要用户在手机上安装Google-Authenticator APP。 用户使用AnyConnect拨号，输入用户名和密码，密码框输入密码+动态码，实现AD账号+动态码双因素认证。 二、CentOS8 环境设置 系统更新[root@centos8 ~]# yum update 修改时区[root@centos8 /]# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 查看时间是否正确[root@centos8 /]#ll /etc/localtime 关闭SElinux，临时关闭和永久关闭。[root@centos8 ~]# setenforce 0[root@centos8 ~]# sed -i &#39;s/=enforcing/=permissive/g&#39; /etc/selinux/config 查看SElinux状态。[root@centos8 ~]# getenforcePermissive 关闭防火墙(可选)，本次实验未关闭防火墙。[root@centos8 ~]# systemctl stop firewalld.service[root@centos8 ~]# systemctl disable firewalld.service 三、FreeRADIUS 安装及配置3.1 FreeRADIUS安装 安装FreeRADIUS[root@centos8 ~]# yum install freeradius freeradius-utils 启动radius服务[root@centos8 ~]# systemctl enable --now radiusd.service 防火墙放行radius[root@centos8 ~]# firewall-cmd --add-service=radius --permanent[root@centos8 ~]# firewall-cmd --reload 3.2 FreeRADIUS修改配置文件 由于FreeRadius必须有权访问所有用户目录中的.google_authenticator令牌，因此它必须具有root权限。123456[root@centos8 ~]# vi /etc/raddb/radiusd.conf #user = radiusd #group = radiusd user = root group = root 取消pam的注释，radius激活PAM（Pluggable Authentication Modules）可动态加载验证模块。123[root@centos8 ~]# vi /etc/raddb/sites-enabled/default pam 激活pam，radius pam模块默认没有激活。[root@centos8 ~]# ln -s /etc/raddb/mods-available/pam /etc/raddb/mods-enabled/pam 编辑/etc/raddb/clients.conf配置文件，接受来Cisco ASAv的radius认证请求。在行末添加防火墙的与共享密钥和ip地址。1234567[root@centos8 ~]# vi /etc/raddb/clients.confclient 192.168.1.254 &#123; secret = cisco shortname = CiscoASA nastype = cisco&#125; 3.1 FreeRADIUS 服务测试 新建用户组，如果你需要拒绝用户访问，可以将用户加入到这个组。[root@centos8 ~]# groupadd radius-disabled 编辑/etc/raddb/users将创建的“radius-disabled”组添加到“拒绝用户组”部分。12345678[root@centos8 ~]# vi /etc/raddb/users#DEFAULT Group == \"disabled\", Auth-Type := Reject# Reply-Message = \"Your account has been disabled.\"DEFAULT Group == \"radius-disabled\", Auth-Type := Reject Reply-Message = \"Your account has been disabled.\"DEFAULT Auth-Type := PAM CentOS新建本地账号测试radius服务。123456[root@centos8 ~]# useradd radlocal[root@centos8 ~]# passwd radlocal更改用户 radlocal 的密码 。新的 密码：radpassword重新输入新的 密码：radpasswordpasswd：所有的身份验证令牌已经成功更新。 radius 开启调式模式，这个命令非常有用，如果认证不成功，可以根据报错信息定位到错误发生的原因。[root@centos8 ~]# radiusd -X 新建一个窗口，测试本地账号radius验证是否通过，注意Received Access-Accept表示认证通过。123456789[root@centos8 ~]# radtest radlocal radpassword localhost 18120 testing123Sent Access-Request Id 9 from 0.0.0.0:41546 to 127.0.0.1:1812 length 78 User-Name = &quot;radlocal&quot; User-Password = &quot;radpassword&quot; NAS-IP-Address = 172.20.29.110 NAS-Port = 18120 Message-Authenticator = 0x00 Cleartext-Password = &quot;radpassword&quot;Received Access-Accept Id 9 from 127.0.0.1:1812 to 127.0.0.1:41546 length 20 开启radius -X窗口显示的输出作为参考。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374Listening on auth address 127.0.0.1 port 18120 bound to server inner-tunnelListening on proxy address * port 43164Listening on proxy address :: port 40551Ready to process requests(0) Received Access-Request Id 9 from 127.0.0.1:41546 to 127.0.0.1:1812 length 78(0) User-Name = \"radlocal\"(0) User-Password = \"radpassword\"(0) NAS-IP-Address = 172.20.29.110(0) NAS-Port = 18120(0) Message-Authenticator = 0xeba37c10c860860bd3dcc7bff2c5edf0(0) # Executing section authorize from file /etc/raddb/sites-enabled/default(0) authorize &#123;(0) policy filter_username &#123;(0) if (&amp;User-Name) &#123;(0) if (&amp;User-Name) -&gt; TRUE(0) if (&amp;User-Name) &#123;(0) if (&amp;User-Name =~ / /) &#123;(0) if (&amp;User-Name =~ / /) -&gt; FALSE(0) if (&amp;User-Name =~ /@[^@]*@/ ) &#123;(0) if (&amp;User-Name =~ /@[^@]*@/ ) -&gt; FALSE(0) if (&amp;User-Name =~ /\\.\\./ ) &#123;(0) if (&amp;User-Name =~ /\\.\\./ ) -&gt; FALSE(0) if ((&amp;User-Name =~ /@/) &amp;&amp; (&amp;User-Name !~ /@(.+)\\.(.+)$/)) &#123;(0) if ((&amp;User-Name =~ /@/) &amp;&amp; (&amp;User-Name !~ /@(.+)\\.(.+)$/)) -&gt; FALSE(0) if (&amp;User-Name =~ /\\.$/) &#123;(0) if (&amp;User-Name =~ /\\.$/) -&gt; FALSE(0) if (&amp;User-Name =~ /@\\./) &#123;(0) if (&amp;User-Name =~ /@\\./) -&gt; FALSE(0) &#125; # if (&amp;User-Name) = notfound(0) &#125; # policy filter_username = notfound(0) [preprocess] = ok(0) [chap] = noop(0) [mschap] = noop(0) [digest] = noop(0) suffix: Checking for suffix after \"@\"(0) suffix: No '@' in User-Name = \"radlocal\", looking up realm NULL(0) suffix: No such realm \"NULL\"(0) [suffix] = noop(0) eap: No EAP-Message, not doing EAP(0) [eap] = noop(0) files: users: Matched entry DEFAULT at line 69(0) [files] = ok(0) [expiration] = noop(0) [logintime] = noop(0) pap: WARNING: No \"known good\" password found for the user. Not setting Auth-Type(0) pap: WARNING: Authentication will fail unless a \"known good\" password is available(0) [pap] = noop(0) &#125; # authorize = ok(0) Found Auth-Type = pam(0) # Executing group from file /etc/raddb/sites-enabled/default(0) authenticate &#123;(0) pam: Using pamauth string \"radiusd\" for pam.conf lookup(0) pam: Authentication succeeded(0) [pam] = ok(0) &#125; # authenticate = ok(0) # Executing section post-auth from file /etc/raddb/sites-enabled/default(0) post-auth &#123;(0) update &#123;(0) No attributes updated(0) &#125; # update = noop(0) [exec] = noop(0) policy remove_reply_message_if_eap &#123;(0) if (&amp;reply:EAP-Message &amp;&amp; &amp;reply:Reply-Message) &#123;(0) if (&amp;reply:EAP-Message &amp;&amp; &amp;reply:Reply-Message) -&gt; FALSE(0) else &#123;(0) [noop] = noop(0) &#125; # else = noop(0) &#125; # policy remove_reply_message_if_eap = noop(0) &#125; # post-auth = noop(0) Sent Access-Accept Id 9 from 127.0.0.1:1812 to 127.0.0.1:41546 length 0(0) Finished requestWaking up in 4.9 seconds.(0) Cleaning up request packet ID 9 with +50Ready to process requests 四、SSSD安装配置 AD已经安装和配置完成，下面是AD的一些配置信息。创建python.com域，DNS能解析公网地址，防止CentOS DNS指向AD之后无法yum安装软件。 创建mfatest的A记录，CentOS做测试解析用途。 安装SSSD，CentOS8已经内建。[root@centos8 ~]# yum install sssd realmd adcli[root@centos8 ~]# yum install oddjob oddjob-mkhomedir sssd samba-commontools 修改DNS，指向AD的IP地址。12[root@centos8 ~]# vi /etc/resolv.confnameserver 192.168.1.20 DNS连通性测试123[root@centos8 ~]# ping python.comPING python.com (192.168.1.20) 56(84) bytes of data.64 bytes from 192.168.1.20 (192.168.1.20): icmp_seq=1 ttl=128 time=0.205 ms DNS解析测试1234567[root@centos8 ~]# nslookup&gt; mfatest.python.comServer: 192.168.1.20Address: 192.168.1.20#53Name: mfatest.python.comAddress: 1.1.1.1 CentOS加入python.com域，输入管理员密码。12[root@centos8 ~]# realm join python.comAdministrator 的密码： 可以发现域信息。1234567891011121314151617[root@centos8 ~]# realm listpython.com type: kerberos realm-name: PYTHON.COM domain-name: python.com configured: kerberos-member server-software: active-directory client-software: sssd required-package: oddjob required-package: oddjob-mkhomedir required-package: sssd required-package: adcli required-package: samba-common-tools login-formats: %U@python.com login-policy: allow-permitted-logins permitted-logins: permitted-groups: vpnusers AD查看CentOS8加入成功。 AD上创建测试用户wintest 在CentOS上使用AD的用户名密码登录测试。12345678910[root@centos8 ~]# ssh -l wintest@python.com localhostThe authenticity of host 'localhost (::1)' can't be established.ECDSA key fingerprint is SHA256:JNzSM2I5llmwVPjZAmZa0n1TS9dAZJYTgB2Odpq5IWA.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added 'localhost' (ECDSA) to the list of known hosts.wintest@python.com@localhost's password:Activate the web console with: systemctl enable --now cockpit.socket[wintest@python.com@centos8 ~]$ exit注销 AD创建vpnusers组，创建vpnuser用户 CentOS放行允许vpnusers这个组的用户在这台机器上认证。这条命令允许所有域账号认证：realm permit -all。这里放行的认证，不只放行了radius，还放行了ssh的认证，生产环境应该禁止这个组用户登录ssh。[root@centos8 ~]# realm permit -g vpnusers 开启radius调试模式[root@centos8 ~]#radius -X 在新的窗口，使用AD账号测试radius认证，认证通过。 123456789[root@centos8 ~]# radtest vpnuser@python.com Cisc0123 localhost 18120 testing123Sent Access-Request Id 16 from 0.0.0.0:38424 to 127.0.0.1:1812 length 88 User-Name = \"vpnuser@python.com\" User-Password = \"Cisc0123\" NAS-IP-Address = 172.20.29.110 NAS-Port = 18120 Message-Authenticator = 0x00 Cleartext-Password = \"Cisc0123\"Received Access-Accept Id 16 from 127.0.0.1:1812 to 127.0.0.1:38424 length 20 radius调试模式看到的日志。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970(2) Received Access-Request Id 16 from 127.0.0.1:38424 to 127.0.0.1:1812 length 88(2) User-Name = \"vpnuser@python.com\"(2) User-Password = \"Cisc0123\"(2) NAS-IP-Address = 172.20.29.110(2) NAS-Port = 18120(2) Message-Authenticator = 0xd2adbf7920450d47617cc1c7128e437e(2) # Executing section authorize from file /etc/raddb/sites-enabled/default(2) authorize &#123;(2) policy filter_username &#123;(2) if (&amp;User-Name) &#123;(2) if (&amp;User-Name) -&gt; TRUE(2) if (&amp;User-Name) &#123;(2) if (&amp;User-Name =~ / /) &#123;(2) if (&amp;User-Name =~ / /) -&gt; FALSE(2) if (&amp;User-Name =~ /@[^@]*@/ ) &#123;(2) if (&amp;User-Name =~ /@[^@]*@/ ) -&gt; FALSE(2) if (&amp;User-Name =~ /\\.\\./ ) &#123;(2) if (&amp;User-Name =~ /\\.\\./ ) -&gt; FALSE(2) if ((&amp;User-Name =~ /@/) &amp;&amp; (&amp;User-Name !~ /@(.+)\\.(.+)$/)) &#123;(2) if ((&amp;User-Name =~ /@/) &amp;&amp; (&amp;User-Name !~ /@(.+)\\.(.+)$/)) -&gt; FALSE(2) if (&amp;User-Name =~ /\\.$/) &#123;(2) if (&amp;User-Name =~ /\\.$/) -&gt; FALSE(2) if (&amp;User-Name =~ /@\\./) &#123;(2) if (&amp;User-Name =~ /@\\./) -&gt; FALSE(2) &#125; # if (&amp;User-Name) = notfound(2) &#125; # policy filter_username = notfound(2) [preprocess] = ok(2) [chap] = noop(2) [mschap] = noop(2) [digest] = noop(2) suffix: Checking for suffix after \"@\"(2) suffix: Looking up realm \"python.com\" for User-Name = \"vpnuser@python.com\"(2) suffix: No such realm \"python.com\"(2) [suffix] = noop(2) eap: No EAP-Message, not doing EAP(2) [eap] = noop(2) files: users: Matched entry DEFAULT at line 69(2) [files] = ok(2) [expiration] = noop(2) [logintime] = noop(2) pap: WARNING: No \"known good\" password found for the user. Not setting Auth-Type(2) pap: WARNING: Authentication will fail unless a \"known good\" password is available(2) [pap] = noop(2) &#125; # authorize = ok(2) Found Auth-Type = pam(2) # Executing group from file /etc/raddb/sites-enabled/default(2) authenticate &#123;(2) pam: Using pamauth string \"radiusd\" for pam.conf lookup(2) pam: Authentication succeeded(2) [pam] = ok(2) &#125; # authenticate = ok(2) # Executing section post-auth from file /etc/raddb/sites-enabled/default(2) post-auth &#123;(2) update &#123;(2) No attributes updated(2) &#125; # update = noop(2) [exec] = noop(2) policy remove_reply_message_if_eap &#123;(2) if (&amp;reply:EAP-Message &amp;&amp; &amp;reply:Reply-Message) &#123;(2) if (&amp;reply:EAP-Message &amp;&amp; &amp;reply:Reply-Message) -&gt; FALSE(2) else &#123;(2) [noop] = noop(2) &#125; # else = noop(2) &#125; # policy remove_reply_message_if_eap = noop(2) &#125; # post-auth = noop(2) Sent Access-Accept Id 16 from 127.0.0.1:1812 to 127.0.0.1:38424 length 0(2) Finished requestWaking up in 4.9 seconds.(2) Cleaning up request packet ID 16 with timestamp +6169Ready to process requests 使用户不需用带域名就可以被识别，需要修改配置文件/etc/sssd/sssd.conf，将use_fully_qualified_names行的True值修改为False。123[root@centos8 ~]# vi /etc/sssd/sssd.confuse_fully_qualified_names = False 重启sssd服务，重新列出域控信息，登录格式可以和之前对比。12345678910111213141516171819[root@centos8 ~]# systemctl restart sssd[root@centos8 ~]# realm listpython.com type: kerberos realm-name: PYTHON.COM domain-name: python.com configured: kerberos-member server-software: active-directory client-software: sssd required-package: oddjob required-package: oddjob-mkhomedir required-package: sssd required-package: adcli required-package: samba-common-tools login-formats: %U login-policy: allow-permitted-logins permitted-logins: permitted-groups: vpnusers 现在不用加域信息也能识别用户。12[root@centos8 ~]# id vpnuseruid=363201109(vpnuser) gid=363200513(domain users) 组=363200513(domain users),363201108(vpnusers) 五、安装和配置Google Authenticator PAM5.1 安装Google Authenticator 准备PAM编译环境12[root@centos8 ~]# yum install pam-devel make gcc-c++ git[root@centos8 ~]# yum install automake autoconf libtool 下载安装文件，注意这里目录为~[root@centos8 ~]# git clone https://github.com/google/google-authenticator-libpam 安装google-authenticator12345[root@centos8 ~]# cd google-authenticator-libpam/[root@centos8 google-authenticator-libpam]# ./bootstrap.sh[root@centos8 google-authenticator-libpam]# ./configure[root@centos8 google-authenticator-libpam]# make[root@centos8 google-authenticator-libpam]# make install 5.2 账号开启双因素认证 切换到ad账号[root@centos8 ~]# su - vpnuser@python.com 为账号开启双因素认证。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748[vpnuser@python.com@centos8 ~]$ google-authenticatorDo you want authentication tokens to be time-based (y/n) yWarning: pasting the following URL into your browser exposes the OTP secret to Google: https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/vpnuser@python.com@centos8%3Fsecret%3DOF2GUT37EUSG7Y2TYX57HKYRUY%26issuer%3Dcentos8Failed to use libqrencode to show QR code visually for scanning.如果安装了`libqrencode`，屏幕会出现一个二维码如果你的终端终端不支持显示二维码，可以手动打开这个网页链接（墙）来查看二维码或者手动输入后面的密钥（secret key）来代替扫描二维码，下面有5个紧急救助码（emergency scratch code），紧急救助码就是当你无法获取认证码时（比如手机丢了），可以当做认证码来用，每用一个少一个，但其实可以手动添加的，建议如果 root 账户使用 Google Authenticator 的话一定要把紧急救助码另外保存一份。Consider typing the OTP secret into your app manually.Your new secret key is: OF2GUT37EUSG7Y2TYX57HKYRUYEnter code from app (-1 to skip): 198586Code confirmedYour emergency scratch codes are: 82763900 77203549 34651872 82841984 93446389Do you want me to update your \"/home/vpnuser@python.com/.google_authenticator\" file? (y/n) y是否更新用户的 Google Authenticator 配置文件，选择 y 才能使上面操作对当前用户生效，其实就是在对应用户的 Home 目录下生成了一个 .google_authenticator 文件，如果你想停用这个用户的 Google Authenticator 验证，只需要删除这个用户 Home 目录下的 .google_authenticator 文件就可以了。Do you want to disallow multiple uses of the same authenticationtoken? This restricts you to one login about every 30s, but it increasesyour chances to notice or even prevent man-in-the-middle attacks (y/n) y每次生成的认证码是否同时只允许一个人使用？这里选择 y。By default, a new token is generated every 30 seconds by the mobile app.In order to compensate for possible time-skew between the client and the server,we allow an extra token before and after the current time. This allows for atime skew of up to 30 seconds between authentication server and client. If youexperience problems with poor time synchronization, you can increase the windowfrom its default size of 3 permitted codes (one previous code, the currentcode, the next code) to 17 permitted codes (the 8 previous codes, the currentcode, and the 8 next codes). This will permit for a time skew of up to 4 minutesbetween client and server.Do you want to do so? (y/n) y是否增加时间误差？这里选择 n或者y都行。If the computer that you are logging into isn't hardened against brute-forcelogin attempts, you can enable rate-limiting for the authentication module.By default, this limits attackers to no more than 3 login attempts every 30s.Do you want to enable rate-limiting? (y/n) y是否启用次数限制？ 上面的交互式的设置也可用通过参数一次性设置（推荐），先查看一下参数含义。123456789101112131415161718192021[vpnuser@python.com@centos8 ~]$google-authenticator -hgoogle-authenticator [&lt;options&gt;] -h, --help Print this message -c, --counter-based Set up counter-based (HOTP) verification -C, --no-confirm Don't confirm code. For non-interactive setups -t, --time-based Set up time-based (TOTP) verification -d, --disallow-reuse Disallow reuse of previously used TOTP tokens -D, --allow-reuse Allow reuse of previously used TOTP tokens -f, --force Write file without first confirming with user -l, --label=&lt;label&gt; Override the default label in \"otpauth://\" URL -i, --issuer=&lt;issuer&gt; Override the default issuer in \"otpauth://\" URL -q, --quiet Quiet mode -Q, --qr-mode=&#123;NONE,ANSI,UTF8&#125; QRCode output mode -r, --rate-limit=N Limit logins to N per every M seconds -R, --rate-time=M Limit logins to N per every M seconds -u, --no-rate-limit Disable rate-limiting -s, --secret=&lt;file&gt; Specify a non-standard file location -S, --step-size=S Set interval between token refreshes -w, --window-size=W Set window of concurrently valid codes -W, --minimal-window Disable window of concurrently valid codes -e, --emergency-codes=N Number of emergency codes to generate 这里Cisco_VPN是会在APP上显示的令牌名标签，vpnuser@centos8是APP上的主机名标签。123[vpnuser@python.com@centos8 ~]$ google-authenticator -t -f -d -l vpnuser@centos8 -i Cisco_VPN -r 3 -R 30 -WWarning: pasting the following URL into your browser exposes the OTP secret to Google: https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/lql@centos8%3Fsecret%3DJQ355PSUBG52KJBUMDJVBSMDLU%26issuer%3DLQL.ME 5.3 修改pam配置文件，并测试AD账号加动态码登录radius。 查找pam_google_authenticator.so所在目录12[root@centos8 ~]# find / -name pam_google_authenticator.so/usr/local/lib/security/pam_google_authenticator.so 编辑/etc/pam.d/radiusd，告诉FreeRadius使用本地Unix密码和Google Authenticator代码对用户进行身份验证。1234567891011121314[root@centos8 ~]# vi /etc/pam.d/radiusd#%PAM-1.0#auth include password-auth#account required pam_nologin.so#account include password-auth#password include password-auth#session include password-authauth requisite /usr/local/lib/security/pam_google_authenticator.so forward_passauth required pam_sss.so use_first_passaccount required pam_nologin.soaccount include password-authsession include password-auth 开启radius调试模式[root@centos8 ~]#radius -X 在新的窗口使用域账号测试radius认证，这里密码构成是密码+动态码。123456789[root@centos8 ~]# radtest vpnuser@python.com Cisc0123072009 localhost 18120 testing123Sent Access-Request Id 119 from 0.0.0.0:49063 to 127.0.0.1:1812 length 88 User-Name = \"vpnuser@python.com\" User-Password = \"Cisc0123072009\" NAS-IP-Address = 172.20.29.110 NAS-Port = 18120 Message-Authenticator = 0x00 Cleartext-Password = \"Cisc0123072009\"Received Access-Accept Id 119 from 127.0.0.1:1812 to 127.0.0.1:49063 length 20 AD 结合动态码测试日志12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970(3) Received Access-Request Id 119 from 127.0.0.1:49063 to 127.0.0.1:1812 length 88(3) User-Name = \"vpnuser@python.com\"(3) User-Password = \"Cisc0123072009\"(3) NAS-IP-Address = 172.20.29.110(3) NAS-Port = 18120(3) Message-Authenticator = 0x457cc852a7cb00f054b1cc168f75998e(3) # Executing section authorize from file /etc/raddb/sites-enabled/default(3) authorize &#123;(3) policy filter_username &#123;(3) if (&amp;User-Name) &#123;(3) if (&amp;User-Name) -&gt; TRUE(3) if (&amp;User-Name) &#123;(3) if (&amp;User-Name =~ / /) &#123;(3) if (&amp;User-Name =~ / /) -&gt; FALSE(3) if (&amp;User-Name =~ /@[^@]*@/ ) &#123;(3) if (&amp;User-Name =~ /@[^@]*@/ ) -&gt; FALSE(3) if (&amp;User-Name =~ /\\.\\./ ) &#123;(3) if (&amp;User-Name =~ /\\.\\./ ) -&gt; FALSE(3) if ((&amp;User-Name =~ /@/) &amp;&amp; (&amp;User-Name !~ /@(.+)\\.(.+)$/)) &#123;(3) if ((&amp;User-Name =~ /@/) &amp;&amp; (&amp;User-Name !~ /@(.+)\\.(.+)$/)) -&gt; FALSE(3) if (&amp;User-Name =~ /\\.$/) &#123;(3) if (&amp;User-Name =~ /\\.$/) -&gt; FALSE(3) if (&amp;User-Name =~ /@\\./) &#123;(3) if (&amp;User-Name =~ /@\\./) -&gt; FALSE(3) &#125; # if (&amp;User-Name) = notfound(3) &#125; # policy filter_username = notfound(3) [preprocess] = ok(3) [chap] = noop(3) [mschap] = noop(3) [digest] = noop(3) suffix: Checking for suffix after \"@\"(3) suffix: Looking up realm \"python.com\" for User-Name = \"vpnuser@python.com\"(3) suffix: No such realm \"python.com\"(3) [suffix] = noop(3) eap: No EAP-Message, not doing EAP(3) [eap] = noop(3) files: users: Matched entry DEFAULT at line 69(3) [files] = ok(3) [expiration] = noop(3) [logintime] = noop(3) pap: WARNING: No \"known good\" password found for the user. Not setting Auth-Type(3) pap: WARNING: Authentication will fail unless a \"known good\" password is available(3) [pap] = noop(3) &#125; # authorize = ok(3) Found Auth-Type = pam(3) # Executing group from file /etc/raddb/sites-enabled/default(3) authenticate &#123;(3) pam: Using pamauth string \"radiusd\" for pam.conf lookup(3) pam: Authentication succeeded(3) [pam] = ok(3) &#125; # authenticate = ok(3) # Executing section post-auth from file /etc/raddb/sites-enabled/default(3) post-auth &#123;(3) update &#123;(3) No attributes updated(3) &#125; # update = noop(3) [exec] = noop(3) policy remove_reply_message_if_eap &#123;(3) if (&amp;reply:EAP-Message &amp;&amp; &amp;reply:Reply-Message) &#123;(3) if (&amp;reply:EAP-Message &amp;&amp; &amp;reply:Reply-Message) -&gt; FALSE(3) else &#123;(3) [noop] = noop(3) &#125; # else = noop(3) &#125; # policy remove_reply_message_if_eap = noop(3) &#125; # post-auth = noop(3) Sent Access-Accept Id 119 from 127.0.0.1:1812 to 127.0.0.1:49063 length 0(3) Finished requestWaking up in 4.9 seconds.(3) Cleaning up request packet ID 119 with timestamp +6972Ready to process requests 六、ASAv AnyConnect 配置6.1 ASAv初始化配置 ASAv接口初始化，这里我通过防火墙mgmt接口ssh网管。12345678910111213141516interface Management0/0 nameif mgmt security-level 0 ip address 192.168.100.100 255.255.255.0ssh 0.0.0.0 0.0.0.0 mgmtinterface GigabitEthernet0/0 nameif outside security-level 0 ip address 202.100.1.254 255.255.255.0!interface GigabitEthernet0/1 nameif inside security-level 100 ip address 192.168.1.254 255.255.255.0 6.2 ASAv上传AnyConnect镜像 开启http服务，创建本地管理密码，让ASDM可以顺利连接。1234http server enable 8000http 0 0 mgmtaaa authentication http console LOCALusername admin password cisco privilege 15 ASDM上传AnyConnect镜像到ASAv本地。 确认AnyConnect上传成功123MFA-ASAv# dirDirectory of disk0:/94 -rwx 41077110 08:07:22 Mar 05 2020 anyconnect-win-4.6.00362-webdeploy-k9.pkg 6.3 Cisco ASAv AnyConnect本地认证配置。 首先配置AnyConnect的本地认证，当本地认证测试通过之后，再将认证流量送到freeradius进行双因素认证。 123456username ssluser password ciscowebvpn enable outside anyconnect image disk0:/anyconnect-win-4.6.00362-webdeploy-k9.pkg 1 anyconnect enable 这里启用了隧道分隔。 1234567891011121314151617access-list anyconnect_split standard permit 192.168.1.0 255.255.255.0access-list anyconnect_filter_acl extended permit ip any 192.168.1.0 255.255.255.0ip local pool sslvpn_pool 192.168.50.100-192.168.50.200group-policy anyconnect_group_policy internalgroup-policy anyconnect_group_policy attributes vpn-filter value anyconnect_filter_acl vpn-tunnel-protocol ssl-client ssl-clientless split-tunnel-policy tunnelspecified split-tunnel-network-list value anyconnect_split address-pools value sslvpn_pool webvpn anyconnect profiles value anyconnect_profile type userusername ssluser attributes vpn-group-policy anyconnect_group_policy 默认anyconnect不允许通过RDP的方式登录，这里我的管理机器是通过RDP登录的。所以需要修改anyconnect profile，让RDP用户能正常登录。 通过ASDM配置profile之后，通过命令行确认profile调用。123group-policy anyconnect_group_policy attributes webvpn anyconnect profiles value anyconnect_profile type user 6.4 AnyConnect本地账号登录测试 6.5 freeradius配置和测试 配置3A服务器指向freeradius。12345678aaa-server freeradius protocol radiusaaa-server freeradius (inside) host 192.168.1.10 key cisco authentication-port 1812tunnel-group DefaultWEBVPNGroup general-attributes authentication-server-group freeradius default-group-policy anyconnect_group_policy ASAv使用AD账号测试radius服务，因为之前修改过SSSD配置文件，这里是否添加python.com域名都可以。123MFA-ASAv# test aaa-server authentication freeradius host 192.168.1.10 username vpnuser password Cisc0123187977INFO: Attempting Authentication test to IP address &lt;192.168.1.10&gt; (timeout: 12 seconds)INFO: Authentication Successful radius调试模式看到的日志12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576Listening on acct address :: port 1813 bound to server defaultListening on auth address 127.0.0.1 port 18120 bound to server inner-tunnelListening on proxy address * port 54915Listening on proxy address :: port 45190Ready to process requests(0) Received Access-Request Id 4 from 192.168.1.254:30861 to 192.168.1.10:1812 length 86(0) User-Name = \"vpnuser\"(0) User-Password = \"Cisc0123187977\"(0) NAS-IP-Address = 192.168.1.254(0) NAS-Port = 4(0) NAS-Port-Type = Virtual(0) Cisco-AVPair = \"coa-push=true\"(0) # Executing section authorize from file /etc/raddb/sites-enabled/default(0) authorize &#123;(0) policy filter_username &#123;(0) if (&amp;User-Name) &#123;(0) if (&amp;User-Name) -&gt; TRUE(0) if (&amp;User-Name) &#123;(0) if (&amp;User-Name =~ / /) &#123;(0) if (&amp;User-Name =~ / /) -&gt; FALSE(0) if (&amp;User-Name =~ /@[^@]*@/ ) &#123;(0) if (&amp;User-Name =~ /@[^@]*@/ ) -&gt; FALSE(0) if (&amp;User-Name =~ /\\.\\./ ) &#123;(0) if (&amp;User-Name =~ /\\.\\./ ) -&gt; FALSE(0) if ((&amp;User-Name =~ /@/) &amp;&amp; (&amp;User-Name !~ /@(.+)\\.(.+)$/)) &#123;(0) if ((&amp;User-Name =~ /@/) &amp;&amp; (&amp;User-Name !~ /@(.+)\\.(.+)$/)) -&gt; FALSE(0) if (&amp;User-Name =~ /\\.$/) &#123;(0) if (&amp;User-Name =~ /\\.$/) -&gt; FALSE(0) if (&amp;User-Name =~ /@\\./) &#123;(0) if (&amp;User-Name =~ /@\\./) -&gt; FALSE(0) &#125; # if (&amp;User-Name) = notfound(0) &#125; # policy filter_username = notfound(0) [preprocess] = ok(0) [chap] = noop(0) [mschap] = noop(0) [digest] = noop(0) suffix: Checking for suffix after \"@\"(0) suffix: No '@' in User-Name = \"vpnuser\", looking up realm NULL(0) suffix: No such realm \"NULL\"(0) [suffix] = noop(0) eap: No EAP-Message, not doing EAP(0) [eap] = noop(0) files: users: Matched entry DEFAULT at line 69(0) [files] = ok(0) [expiration] = noop(0) [logintime] = noop(0) pap: WARNING: No \"known good\" password found for the user. Not setting Auth-Type(0) pap: WARNING: Authentication will fail unless a \"known good\" password is available(0) [pap] = noop(0) &#125; # authorize = ok(0) Found Auth-Type = pam(0) # Executing group from file /etc/raddb/sites-enabled/default(0) authenticate &#123;(0) pam: Using pamauth string \"radiusd\" for pam.conf lookup(0) pam: Authentication succeeded(0) [pam] = ok(0) &#125; # authenticate = ok(0) # Executing section post-auth from file /etc/raddb/sites-enabled/default(0) post-auth &#123;![login-ad](https://i.imgur.com/yltINYr.png)(0) update &#123;(0) No attributes updated(0) &#125; # update = noop(0) [exec] = noop(0) policy remove_reply_message_if_eap &#123;(0) if (&amp;reply:EAP-Message &amp;&amp; &amp;reply:Reply-Message) &#123;(0) if (&amp;reply:EAP-Message &amp;&amp; &amp;reply:Reply-Message) -&gt; FALSE(0) else &#123;(0) [noop] = noop(0) &#125; # else = noop(0) &#125; # policy remove_reply_message_if_eap = noop(0) &#125; # post-auth = noop(0) Sent Access-Accept Id 4 from 192.168.1.10:1812 to 192.168.1.254:30861 length 0(0) Finished requestWaking up in 4.9 seconds.(0) Cleaning up request packet ID 4 with timestamp +11Ready to process requests 如果radius -X 无法运行，并且报错如下，一般是radius服务已经启动，占用了1812端口号导致的。 12Failed binding to auth address * port 1812 bound to server default: Address already in use/etc/raddb/sites-enabled/default[59]: Error binding to port for 0.0.0.0 port 1812 查看UDP端口号使用。 12345[root@centos8 ~]# ss -ulnpState Recv-Q Send-Q Local Address:Port Peer Address:PortUNCONN 0 0 127.0.0.1:18120 0.0.0.0:* users:((\"radiusd\",pid=15068,fd=14))UNCONN 0 0 0.0.0.0:1812 0.0.0.0:* users:((\"radiusd\",pid=15068,fd=10))UNCONN 0 0 0.0.0.0:1813 0.0.0.0:* users:((\"radiusd\",pid=15068,fd=11)) 可以使用pkill命令结束radius所有进程。[root@centos8 ~]# pkill radiusd 6.6 使用 AD账号+动态码 登录AnyConnect AnyConnect输入密码时，首先输入AD密码，然后输入6位动态码。例如这里密码是Cisc0123，动态码是914714，那么密码框应该输入Cisc0123914714。 动态码 AnyConnect登录，radius 调试日志。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586(4) Received Access-Request Id 8 from 192.168.1.254:30861 to 192.168.1.10:1812 length 666(4) User-Name = \"vpnuser\"(4) User-Password = \"Cisc0123914714\"(4) NAS-Port = 32768(4) Called-Station-Id = \"202.100.1.254\"(4) Calling-Station-Id = \"202.100.1.10\"(4) NAS-Port-Type = Virtual(4) Tunnel-Client-Endpoint:0 = \"202.100.1.10\"(4) Cisco-AVPair = \"mdm-tlv=device-platform=win\"(4) Cisco-AVPair = \"mdm-tlv=device-mac=00-50-56-8e-14-a9\"(4) Cisco-AVPair = \"mdm-tlv=device-mac=00-50-56-8e-8a-ac\"(4) Cisco-AVPair = \"mdm-tlv=device-mac=00-50-56-8e-93-54\"(4) Cisco-AVPair = \"mdm-tlv=device-type=VMware, Inc. VMware7,1\"(4) Cisco-AVPair = \"mdm-tlv=device-platform-version=10.0.18362 \"(4) Cisco-AVPair = \"mdm-tlv=ac-user-agent=AnyConnect Windows 4.6.00362\"(4) Cisco-AVPair = \"mdm-tlv=device-uid=D7237D73128E45F4F2706858D0F4AC09129E5131839298ACB03D3999125B5FC1\"(4) NAS-IP-Address = 192.168.1.254(4) Cisco-AVPair = \"audit-session-id=c0a801fe000080005e60c235\"(4) Cisco-AVPair = \"ip:source-ip=202.100.1.10\"(4) ASA-TunnelGroupName = \"DefaultWEBVPNGroup\"(4) ASA-ClientType = AnyConnect-Client-SSL-VPN(4) Cisco-AVPair = \"coa-push=true\"(4) # Executing section authorize from file /etc/raddb/sites-enabled/default(4) authorize &#123;(4) policy filter_username &#123;(4) if (&amp;User-Name) &#123;(4) if (&amp;User-Name) -&gt; TRUE(4) if (&amp;User-Name) &#123;(4) if (&amp;User-Name =~ / /) &#123;(4) if (&amp;User-Name =~ / /) -&gt; FALSE(4) if (&amp;User-Name =~ /@[^@]*@/ ) &#123;(4) if (&amp;User-Name =~ /@[^@]*@/ ) -&gt; FALSE(4) if (&amp;User-Name =~ /\\.\\./ ) &#123;(4) if (&amp;User-Name =~ /\\.\\./ ) -&gt; FALSE(4) if ((&amp;User-Name =~ /@/) &amp;&amp; (&amp;User-Name !~ /@(.+)\\.(.+)$/)) &#123;(4) if ((&amp;User-Name =~ /@/) &amp;&amp; (&amp;User-Name !~ /@(.+)\\.(.+)$/)) -&gt; FALSE(4) if (&amp;User-Name =~ /\\.$/) &#123;(4) if (&amp;User-Name =~ /\\.$/) -&gt; FALSE(4) if (&amp;User-Name =~ /@\\./) &#123;(4) if (&amp;User-Name =~ /@\\./) -&gt; FALSE(4) &#125; # if (&amp;User-Name) = notfound(4) &#125; # policy filter_username = notfound(4) [preprocess] = ok(4) [chap] = noop(4) [mschap] = noop(4) [digest] = noop(4) suffix: Checking for suffix after \"@\"(4) suffix: No '@' in User-Name = \"vpnuser\", looking up realm NULL(4) suffix: No such realm \"NULL\"(4) [suffix] = noop(4) eap: No EAP-Message, not doing EAP(4) [eap] = noop(4) files: users: Matched entry DEFAULT at line 69(4) [files] = ok(4) [expiration] = noop(4) [logintime] = noop(4) pap: WARNING: No \"known good\" password found for the user. Not setting Auth-Type(4) pap: WARNING: Authentication will fail unless a \"known good\" password is available(4) [pap] = noop(4) &#125; # authorize = ok(4) Found Auth-Type = pam(4) # Executing group from file /etc/raddb/sites-enabled/default(4) authenticate &#123;(4) pam: Using pamauth string \"radiusd\" for pam.conf lookup(4) pam: Authentication succeeded(4) [pam] = ok(4) &#125; # authenticate = ok(4) # Executing section post-auth from file /etc/raddb/sites-enabled/default(4) post-auth &#123;(4) update &#123;(4) No attributes updated(4) &#125; # update = noop(4) [exec] = noop(4) policy remove_reply_message_if_eap &#123;(4) if (&amp;reply:EAP-Message &amp;&amp; &amp;reply:Reply-Message) &#123;(4) if (&amp;reply:EAP-Message &amp;&amp; &amp;reply:Reply-Message) -&gt; FALSE(4) else &#123;(4) [noop] = noop(4) &#125; # else = noop(4) &#125; # policy remove_reply_message_if_eap = noop(4) &#125; # post-auth = noop(4) Sent Access-Accept Id 8 from 192.168.1.10:1812 to 192.168.1.254:30861 length 0(4) Finished requestWaking up in 4.9 seconds.(4) Cleaning up request packet ID 8 with timestamp +608Ready to process requests","categories":[{"name":"Cisco VPN","slug":"Cisco-VPN","permalink":"http://yoursite.com/categories/Cisco-VPN/"}],"tags":[{"name":"Cisco ASAv","slug":"Cisco-ASAv","permalink":"http://yoursite.com/tags/Cisco-ASAv/"},{"name":"AnyConnect","slug":"AnyConnect","permalink":"http://yoursite.com/tags/AnyConnect/"},{"name":"FreeRADIUS","slug":"FreeRADIUS","permalink":"http://yoursite.com/tags/FreeRADIUS/"},{"name":"Google Authenticator","slug":"Google-Authenticator","permalink":"http://yoursite.com/tags/Google-Authenticator/"}]},{"title":"Python SNMP协议","slug":"Python-SNMP协议","date":"2019-12-05T01:35:41.000Z","updated":"2019-12-05T01:38:40.772Z","comments":true,"path":"2019/12/05/Python-SNMP协议/","link":"","permalink":"http://yoursite.com/2019/12/05/Python-SNMP%E5%8D%8F%E8%AE%AE/","excerpt":"Python SNMP 协议SNMPv2 明文图片view表示节点图片SNMP 统一包格式图片","text":"Python SNMP 协议SNMPv2 明文图片view表示节点图片SNMP 统一包格式图片 [toc] 1.理论SNMP 三大组件 SNMP Manager，也就是SNMP服务器（Network Management Server NMS），比如PI，solarwinds，运行Python脚本的 SNMP 服务器。 SNMP Agent，被网管的设备，比如路由器，交换机和服务器。 Management Information Base（MIB），是一个树状结构的信息库，设备的每个资源通过OID（object id）来表示。 SNMPv1 / v2 信息简单来说就是3种消息 GET：由 NMS（网络管理设备）发起的 获取管理设备信息的报文。 SET：由 NMS（网络管理设备）发起的 配置管理设备的报文。 Trap：被管理设备主动发起通知报文。 v1/v2 几乎没有安全性，没有加密，没有认证，只是存在一个community字符串，但是这个字符串还是明文的。而且很多设备激活了默认的community，默认的public有读写权限，默认的private有读权限。 V3 提供完整的安全性保障，支持认证和加密。 2.SNMP 基本操作与MIBSNMPv2 基本配置这里R1是trap community，一般不会设置，服务器只有匹配了这个community才能收这个trap消息。 1234567891011121314snmp-server community nwcd_test_ro rosnmp-server community nwcd_test_rw rwsnmp-server location beijing_indigosnmp-server contact qianglongliu# 联系人snmp-server enable traps# 激活所有能激活的trapsnmp-server enable traps snmp linkdown linkup# 只激活接口up downsnmp-server host 10.1.1.100 version 2c R1 SNMPv3 基本配置如果只是对设备进行认证加密，使用下面的命令即可完成。priv表示既做认证又做加密。但是对用户的权限没有进行控制。 12snmp-server group nwcd_test_group v3 priv snmp-server user nwcd_test_user nwcd_test_group v3 auth sha Cisc0123 priv des Cisc0123 配置路由器在5分钟内CPU总利用率超过20%时发送Trap信息 1R1(config)#process cpu threshold type total rising 20 interval 5 可以使用view来限制用户的权限访问，view是节点范围的名字。internet和inclouded都是节点的名字。让这个组只能读取节点往下的oid信息。 123456789101112snmp-server view nwcd_view internet includedsnmp-server group nwcd_test_group v3 priv read nwcd_view_read write nwcd_view_writesnmp-server user nwcd_test_user nwcd_test_group v3 auth sha Cisc0123 priv des Cisc0123snmp-server enable traps config# 进入和退出config模式会触发trapsnmp-server enable traps syslog# CPU超过阈值会触发trapsnmp-server host 10.1.1.10 version 3 priv nwcd_test_user# 这里使用nwcd_test_test这个用户的认证和加密方式。 注意，如果cisco上既配置SNMPv1 v2 和 v3，OIDView软件会优先选择v1和v2。 3.SNMP 七种操作SNMP 统一报文格式SNMP基于UDP端口161 和162，Get Set是161，Trap是162。 操作类型 get-request manager到agent获取某个单一节点的信息 get-response 各种请求类型的响应 会有报错的响应，例如set一个不存在的OID（报错为Error Status:17,Error Index:1） 介绍Error Status: *http://tcpipguide.com/free/t_SNMPVersion2SNMPv2MessageFormats-5.htm* set-request manager到agent修改某个单一节点的信息 get-next-request 一个节点下面可能有很多个值，比如接口这个节点下面会有很多个接口，你可能并不知道有哪些接口存在，有时候为了代码的通用性，会发送get-next-request。 例如：管理软件向路由器 1-2-5-2 发送get-next-request，agent会回复1-2-5-2-1；NMS 继续发送get-next-request 1-2-5-2-1，agent回复 1-2-5-2-2，NMS不断获取OID的下一个OID，这样获取到所有的子节点，通常用于获取表格信息。 这种形式的缺点是效率低下，循环往复的获取。速度慢，浪费带宽。所以通常所用这个方式，而是采用getBulkRequest。 get-bulk-request NMS获取一个节点的所以子节点，效率比get-next更高。 每次返回多个（默认25个，可以设置数量）。 如果主OID下面的内容不够25个，返回的主OID下的内容和后续的内容凑足25个。软件一般会过滤掉后面的OID，但是抓包可以看到。（要多少个，一定给你凑足这么多个，有点二）。 如果主OID下面的内容不只25个，会做多次get-bulk-request操作，知道OID下面的内容全部返回，最后一次如果不足25个，依然会补齐25个。 trap agent发向NMS，目的端口号162。对于NMS而言，是一个无故的消息。 可以设置trap community来进行过滤，只有服务器和路由器设置了相同的trap community，服务器才能接受trap消息。 inform-request trap是没有确认机制的，主要为了解决trap没有确认机制的问题。Agent发送一个Inform消息，服务器需要回复。服务器回复get-response报文，报文内容就是客户端发过来的东西，相当于确认。 这里加上informs，讲trap类型改为inform类型，增加确认机制。1snmp-server host 10.1.1.1 informs version 2c R1` 思科OID查询 4.SNMPv2 Python实现SNMPv2 Get &#123;.line-numbers&#125;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#!/usr/bin/python3.6# -*- coding=utf-8 -*-from pysnmp.hlapi import *def snmpv2_get(ip, community, oid, port=161): # varBinds是列表，列表中的每个元素的类型是ObjectType（该类型的对象表示MIB variable） errorIndication, errorStatus, errorindex, varBinds = next( getCmd(SnmpEngine(), CommunityData(community), # 配置community UdpTransportTarget((ip, port)), # 配置目的地址和端口号 ContextData(), ObjectType(ObjectIdentity(oid)) # 读取的OID ) ) # 错误处理 if errorIndication: print(errorIndication) elif errorStatus: print('%s at %s' % ( errorStatus, errorindex and varBinds[int(errorindex) - 1][0] or '?' ) ) # 如果返回结果有多行,需要拼接后返回 result = \"\" for varBind in varBinds: result = result + varBind.prettyPrint() # 返回结果！ return result.split(\"=\")[0].strip(), result.split(\"=\")[1].strip() # 返回的为一个元组,OID与字符串结果if __name__ == \"__main__\": # 使用Linux解释器 &amp; WIN解释器 print(snmpv2_get(\"10.1.1.20\", \"nwcd_test_rw\", \"1.3.6.1.2.1.1.1.0\", port=161)) # 系统描述 print(snmpv2_get(\"10.1.1.20\", \"nwcd_test_rw\", \"1.3.6.1.2.1.1.4.0\", port=161)) # 联系人 print(snmpv2_get(\"10.1.1.20\", \"nwcd_test_rw\", \"1.3.6.1.2.1.1.5.0\", port=161)) # 主机名 print(snmpv2_get(\"10.1.1.20\", \"nwcd_test_rw\", \"1.3.6.1.2.1.1.6.0\", port=161)) # 地点 print(snmpv2_get(\"10.1.1.20\", \"nwcd_test_rw\", \"1.3.6.1.4.1.9.9.109.1.1.1.1.3.7\", port=161)) # cpmCPUTotal5sec print(snmpv2_get(\"10.1.1.20\", \"nwcd_test_rw\", \"1.3.6.1.4.1.9.9.109.1.1.1.1.12.7\", port=161)) # cpmCPUMemoryUsed print(snmpv2_get(\"10.1.1.20\", \"nwcd_test_rw\", \"1.3.6.1.4.1.9.9.109.1.1.1.1.13.7\", port=161)) # cpmCPUMemoryFree 5.SNMPv3 Python实现","categories":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/categories/Python/"}],"tags":[]},{"title":"WLC HA 升级步骤","slug":"WLC-HA-升级步骤","date":"2019-11-07T08:07:45.000Z","updated":"2019-11-07T08:09:33.279Z","comments":true,"path":"2019/11/07/WLC-HA-升级步骤/","link":"","permalink":"http://yoursite.com/2019/11/07/WLC-HA-%E5%8D%87%E7%BA%A7%E6%AD%A5%E9%AA%A4/","excerpt":"WLC HA 升级步骤[TOC]","text":"WLC HA 升级步骤[TOC] 上传升级镜像通过FTP上传镜像到WLC 查看镜像上传成功123(Cisco Controller) &gt;show bootPrimary Boot Image............................... 8.5.151.0 (default)Backup Boot Image................................ 8.5.140.0 (active) 查看AP当前运行版本1234567891011121314151617181920212223(Cisco Controller) &gt;show ap image allTotal number of APs.............................. 69Number of APs Initiated....................................... 0 Downloading..................................... 0 Predownloading.................................. 0 Completed predownloading........................ 0 Not Supported................................... 0 Failed to Predownload........................... 0 Predownload Predownload FlexconnectAP Name Primary Image Backup Image Status Version Next Retry Time Retry Count Predownload------------------ -------------- -------------- --------------- -------------- ---------------- ------------ --------------pekidg-ap31-301 8.5.140.0 8.2.166.0 None None NA NA pekidg-ap22-608 8.5.140.0 8.2.166.0 None None NA NA pekidg-ap29-302 8.5.140.0 8.2.166.0 None None NA NA pekidg-ap04-N135 8.5.140.0 8.2.166.0 None None NA NA pekidg-ap10-302 8.5.140.0 8.2.166.0 None None NA NA pekidg-ap18-S062 8.5.140.0 8.2.166.0 None None NA NA pekidg-ap12-301 8.5.140.0 8.2.166.0 None None NA NA pekidg-ap02-707 8.5.140.0 8.2.166.0 None None NA NA pekidg-ap30-301 8.5.140.0 8.2.166.0 None None NA NA 推送新镜像到AP1(Cisco Controller) &gt;config ap image predownload primary all 查看推送过程123456789101112131415161718192021222324(Cisco Controller) &gt;show ap image allTotal number of APs.............................. 69Number of APs Initiated....................................... 0 Downloading..................................... 0 Predownloading.................................. 69 Completed predownloading........................ 0 Not Supported................................... 0 Failed to Predownload........................... 0 Predownload Predownload FlexconnectAP Name Primary Image Backup Image Status Version Next Retry Time Retry Count Predownload------------------ -------------- -------------- --------------- -------------- ---------------- ------------ --------------pekidg-ap31-301 8.5.140.0 8.2.166.0 Predownloading 8.5.151.0 NA 0pekidg-ap22-608 8.5.140.0 8.2.166.0 Predownloading 8.5.151.0 NA 0pekidg-ap29-302 8.5.140.0 8.2.166.0 Predownloading 8.5.151.0 NA 0pekidg-ap04-N135 8.5.140.0 8.2.166.0 Predownloading 8.5.151.0 NA 0pekidg-ap10-302 8.5.140.0 8.2.166.0 Predownloading 8.5.151.0 NA 0pekidg-ap18-S062 8.5.140.0 8.2.166.0 Predownloading 8.5.151.0 NA 0pekidg-ap12-301 8.5.140.0 8.2.166.0 Predownloading 8.5.151.0 NA 0pekidg-ap02-707 8.5.140.0 8.2.166.0 Predownloading 8.5.151.0 NA 0pekidg-ap30-301 8.5.140.0 8.2.166.0 Predownloading 8.5.151.0 NA 0pekidg-ap20-S038 8.5.140.0 8.2.166.0 Predownloading 8.5.151.0 NA 0 推送成功123456789101112131415161718192021222324(Cisco Controller) &gt;show ap image allTotal number of APs.............................. 69Number of APs Initiated....................................... 0 Downloading..................................... 0 Predownloading.................................. 1 Completed predownloading........................ 68 Not Supported................................... 0 Failed to Predownload........................... 0 Predownload Predownload FlexconnectAP Name Primary Image Backup Image Status Version Next Retry Time Retry Count Predownload------------------ -------------- -------------- --------------- -------------- ---------------- ------------ --------------pekidg-ap31-301 8.5.140.0 8.5.151.0 Complete 8.5.151.0 NA NApekidg-ap22-608 8.5.140.0 8.5.151.0 Complete 8.5.151.0 NA NApekidg-ap29-302 8.5.140.0 8.5.151.0 Complete 8.5.151.0 NA NApekidg-ap04-N135 8.5.140.0 8.5.151.0 Complete 8.5.151.0 NA NApekidg-ap10-302 8.5.140.0 8.5.151.0 Complete 8.5.151.0 NA NApekidg-ap18-S062 8.5.140.0 8.5.151.0 Complete 8.5.151.0 NA NApekidg-ap12-301 8.5.140.0 8.5.151.0 Complete 8.5.151.0 NA NApekidg-ap02-707 8.5.140.0 8.5.151.0 Complete 8.5.151.0 NA NApekidg-ap30-301 8.5.140.0 8.5.151.0 Complete 8.5.151.0 NA NApekidg-ap20-S038 8.5.140.0 8.5.151.0 Complete 8.5.151.0 NA NA 确认WLC HA 状态正常123456789101112(Cisco Controller) &gt;show redundancy summary Redundancy Mode = SSO ENABLED Local State = ACTIVE Peer State = STANDBY HOT Unit = Primary Unit ID = 28:AC:9E:DF:93:D1 Redundancy State = SSO Mobility MAC = 28:AC:9E:DF:93:D1 Redundancy Port = UP BulkSync Status = CompleteAverage Redundancy Peer Reachability Latency = 102 Micro SecondsAverage Management Gateway Reachability Latency = 863 Micro Seconds 重启WLC配置00:01:10之后重启，时间太短报错 12(Cisco Controller) &gt;reset system both in 00:01:10 image swap reset-aps save-configTime period is too short. 推荐配置00:02:01之后重启，both表示重启2台WLC。（有可能重启之后AP已经升级到了新的镜像，但是WLC依然还是以前的镜像，这时候再敲一下下面的命令重启WLC即可。） 123456789(Cisco Controller) &gt;reset system both in 00:02:01 image swap reset-aps save-configSystem reset is scheduled for Nov 07 00:00:14 2019.Current local time and date is Nov 06 23:58:13 2019.Trap will not be generated as total delay is less than the trap time.Active boot image will be changed before the reset.Use 'reset system cancel' to cancel the reset.The system has unsaved changes.Configuration will be saved before the system reset.","categories":[],"tags":[]},{"title":"markdown","slug":"markdown","date":"2019-11-07T02:57:36.000Z","updated":"2019-11-07T02:57:49.519Z","comments":true,"path":"2019/11/07/markdown/","link":"","permalink":"http://yoursite.com/2019/11/07/markdown/","excerpt":"一级标题二级标题","text":"一级标题二级标题三级标题四级标题五级标题六级标题印象笔记 近日，印象笔记宣布完成重组。作为Evernote已在中国独立运营近6年的品牌，印象笔记将成为由中方控股的中美合资独立运营实体，并获得红杉宽带跨境数字产业基金首轮数亿元人民币投资。 印象笔记官网 使用 iOS 版本印象笔记如何快速保存内容？ 启用印象笔记 Widget ——印象笔记·剪贴板 复制粘贴任意内容 微信 滑动到 Widget 插件区域即可完成保存印象笔记·剪贴板有什么特点？ 快：开启自动模式，可以自动保存剪贴板的任意内容 一切：只要可以复制粘贴就可以保存 有序：全部保存在「我的剪贴板」笔记本并以时间来命名 三只青蛙 第一只青蛙 第二只青蛙 第三只青蛙 帐户类型 免费帐户 标准帐户 高级帐户 帐户流量 60M 1GB 10GB 设备数目 2台 无限制 无限制 当前价格 免费 ￥8.17/月 ￥12.33/月 12345678910111213,预算,收入,花费,债务June,5000,8000,4000,6000July,3000,1000,4000,3000Aug,5000,7000,6000,3000Sep,7000,2000,3000,1000Oct,6000,5000,4000,2000Nov,4000,3000,5000,type: pietitle: 每月收益x.title: Amounty.title: Monthy.suffix: $ 12345678910111213141516171819202122#!/usr/bin/pythonimport reline = \"Cats are smarter than dogs\"matchObj = re.match( r'(.*) are (.*?) .*', line, re.M|re.I)if matchObj: print \"matchObj.group() : \", matchObj.group() print \"matchObj.group(1) : \", matchObj.group(1) print \"matchObj.group(2) : \", matchObj.group(2)else: print \"No match!!\" list1 = ['aaa',111,(4,5),2.01]list2 = ['bbb',333,111,3.14,(4,5)]for x in list1: if x in list2: print(x,'in list1 and list2') else: print(x,'only in list1') 1e^&#123;i\\pi&#125; + 1 = 0 123456graph TDA[模块A] --&gt;|A1| B(模块B)B --&gt; C&#123;判断条件C&#125;C --&gt;|条件C1| D[模块D]C --&gt;|条件C2| E[模块E]C --&gt;|条件C3| F[模块F] 123sequenceDiagramA-&gt;&gt;B: 是否已收到消息？B--&gt;&gt;A: 已收到消息 123456789gantttitle 甘特图dateFormat YYYY-MM-DDsection 项目A任务1 :a1, 2018-06-06, 30d任务2 :after a1 , 20dsection 项目B任务3 :2018-06-12 , 12d任务4 : 24d","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-11-06T04:24:48.087Z","updated":"2019-11-06T04:24:48.087Z","comments":true,"path":"2019/11/06/hello-world/","link":"","permalink":"http://yoursite.com/2019/11/06/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}